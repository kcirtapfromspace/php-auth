<?php

namespace Udoh\Emsa\UI;

/**
 * Copyright (c) 2016 Utah Department of Technology Services and Utah Department of Health
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In addition, this program is also subject to certain additional terms. You should
 * have received a copy of these additional terms immediately following the terms and
 * conditions of the GNU Affero General Public License which accompanied the program.
 * If not, please request a copy in writing from the Utah Department of Health at
 * the address below.
 *
 * If you have questions concerning this license or the applicable additional terms,
 * you may contact us in writing at:
 * Utah Department of Health, P.O. Box 141010, Salt Lake City, UT 84114-1010 USA.
 *
 * @copyright Copyright (c) 2016 Utah Department of Technology Services and Utah Department of Health
 */

use PDO;
use DateInterval;
use DatePeriod;
use Exception;
use EmsaUtils;
use Throwable;
use Udoh\Emsa\Utils\ExceptionUtils;
use Udoh\Emsa\Utils\DateTimeUtils;

/**
 * Functionality for generating EMSA Dashboard report widgets.
 *
 * @author Josh Ridderhoff <jridderhoff@utah.gov>
 */
class Dashboard
{

    /** @var PDO */
    protected $dbConn;

    const TOOLTIP_SUMMARY = "For the specified date range and reporting facilities, indicates how many individual HL7 messages are currently in each EMSA queue.\n(Excludes blacklisted messages.)";
    const TOOLTIP_AUTOFACTOR = "For all assigned HL7 messages reported in the specified date range and by the specified reporting facilities, indicates the percentage of messages assigned automatically vs. messages requiring human assignment via EMSA.";
    const TOOLTIP_BLACKLIST = "For the specified date range, indicates the total number of HL7 messages blacklisted per reporting facility.";
    const TOOLTIP_MQF = "For the specified date range and reporting facilities, indicates the total number of HL7 messages containing QA errors.";
    const TOOLTIP_NEW_CMR = "For the specified date range and reporting facilities, indicates the total number of new CMRs generated by ELR per CDC disease category.";
    const TOOLTIP_UPDATED_LAB = "For the specified date range and reporting facilities, indicates the total number of lab results in NEDSS updated by ELR per CDC disease category.\n\nFor example, if three separate HL7 messages updated the same lab result in NEDSS, a count of '1' would be displayed here.";
    const TOOLTIP_DISCARD = "For the specified date range and reporting facilities, indicates the total number of HL7 messages discarded as duplicate lab results per CDC disease category.";
    const TOOLTIP_GRAYLIST = "For the specified date range and reporting facilities, indicates the total number of HL7 messages graylisted per CDC disease category.";
    const TOOLTIP_LAB_SUMMARY = "For the specified date range, indicates the total number of individual HL7 messages received per day and reporting facility.\n(Excludes blacklisted messages.)";
    const TOOLTIP_CONDITION_SUMMARY = "List of all conditions for which HL7 messages have been received in the specified date range from the specified reporting facilities.\n\n'Messages Received' indicates the total number of HL7 messages received per condition (excluding blacklisted messages), and 'Assigned Labs' indicates the total number of lab results in NEDSS affected by those messages.\n\nFor example:  if three separate HL7 messages update the same lab result in NEDSS, the 'Assigned Labs' column will only show '1', while the 'Messages Received' column will show '3'.";
    const TOOLTIP_AVGTIME = "For the specified date range and reporting facilities, indicates the average elapsed time between specimen collection and routing to LHDs for all new ELR-generated CMRs, per CDC disease category.";
    const TOOLTIP_ALERTS = "Shows any current non-message-associated system alerts in EMSA.";
    const TOOLTIP_TAP = "Shows the total number of ELR messages received over the past two weeks divided into 10-minute intervals throughout the day.";
    const TOOLTIP_TAP_SELECTED = "Shows the total number of ELR messages received during the selected date range for the selected sender(s) divided into 4-hour intervals.  If more than one sender is selected, all selected senders are shown in aggregate.";
    const TOOLTIP_TAP_SELECTED_DOW = "Shows the total number of ELR messages received during the selected date range for the selected sender(s) divided into 4-hour intervals, grouped by Day of Week.  If more than one sender is selected, all selected senders are shown in aggregate.";

    /**
     * Create a new EMSA Dashboard object & initialize it with a connection to the EMSA database.
     *
     * @param PDO $dbConn
     */
    public function __construct(PDO $dbConn)
    {
        $this->dbConn = $dbConn;
    }

    /**
     * Show the volume of messages received by 10-minute window for the past 14 days.
     *
     * @return array
     */
    public function getTrafficArrivalPattern()
    {
        $summary = array();

        try {
            $sql = "SELECT ( lpad((inspection_window/6)::text, 2, '0') || ':' || lpad(((inspection_window % 6)*10)::text, 2, '0') ) AS verbose_window, count(om.created_at) AS window_count
                    FROM generate_series(0,143) inspection_window
                    LEFT JOIN (
                      SELECT created_at FROM elr.system_original_messages
                      WHERE connector NOT LIKE 'MANUAL%'
                      AND created_at > localtimestamp - interval '14 days'
                    ) AS om ON (((floor(extract(MINUTE FROM om.created_at)/10))+(extract(HOUR FROM om.created_at)*6)) = inspection_window)
                    GROUP BY 1
                    ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->verbose_window] = intval($row->window_count);
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * Show the volume of messages received by 4-hour window for the selected senders and time period.
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate   End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     * @throws Exception
     */
    public function getTrafficArrivalPatternSelected($fromDate, $toDate)
    {
        $summary = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $sql = "SELECT ( lpad((inspection_window*4)::text, 2, '0') || ':00 - ' || lpad(((inspection_window+1)*4)::text, 2, '0') || ':00' ) AS verbose_window, count(sm.reported_at) AS window_count
                    FROM generate_series(0,5) inspection_window
                    LEFT JOIN (
                      SELECT reported_at FROM elr.system_messages
                      WHERE $labFilterClause (reported_at >= :cleanFromDate)
                      AND (reported_at <= :cleanToDate)
                      AND vocab_app_id = 2
                    ) AS sm ON ((floor(extract(HOUR FROM sm.reported_at)/4)) = inspection_window)
                    GROUP BY 1
                    ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);

            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->verbose_window] = intval($row->window_count);
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * Show the volume of messages received by 4-hour window for the selected senders and time period grouped by Day of Week.
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate   End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     * @throws Exception
     */
    public function getTrafficArrivalPatternSelectedDOW($fromDate, $toDate)
    {
        $summary = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $sql = "WITH window_by_day AS (
                        SELECT dow.id AS day_id, dow.name::varchar AS day_name, inspection_window
                        FROM generate_series(0,5) inspection_window
                        CROSS JOIN (values(0,'Sunday'),(1,'Monday'),(2,'Tuesday'),(3,'Wednesday'),(4,'Thursday'),(5,'Friday'),(6,'Saturday')) AS dow(id, name)
                    )
                    SELECT ( wbd.day_name || ' (' || lpad((wbd.inspection_window*4)::text, 2, '0') || ':00 - ' || lpad(((wbd.inspection_window+1)*4)::text, 2, '0') || ':00)' ) AS verbose_window, count(sm.reported_at) AS window_count
                    FROM window_by_day wbd
                    LEFT JOIN (
                        SELECT reported_at, floor(extract(HOUR FROM reported_at)/4)::integer AS inspection_window, extract(DOW from reported_at) AS dow
                        FROM elr.system_messages
                        WHERE $labFilterClause (reported_at >= :cleanFromDate)
                        AND (reported_at <= :cleanToDate)
                        AND vocab_app_id = 2
                    ) AS sm ON (sm.inspection_window = wbd.inspection_window AND sm.dow = wbd.day_id)
                    GROUP BY wbd.day_id, wbd.day_name, wbd.inspection_window
                    ORDER BY wbd.day_id, wbd.inspection_window;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);

            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->verbose_window] = intval($row->window_count);
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * Returns Queue summary data for 'EMSA Queue Overview' report.
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array Array of Queue stats
     */
    public function getDashboardSummary($fromDate, $toDate)
    {
        $dashboardSummary = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $sql = "SELECT
							sum(case when sm.final_status=14 AND (sm.deleted = 0 OR sm.deleted IS NULL)then 1 else 0 end) as assigned,
							sum(case when sm.final_status=2 AND (sm.deleted = 0 OR sm.deleted IS NULL)then 1 else 0 end) as gray,
							sum(case when sm.final_status=17 AND (sm.deleted = 0 OR sm.deleted IS NULL)then 1 else 0 end) as entry,
							sum(case when sm.final_status=24 AND (sm.deleted = 0 OR sm.deleted IS NULL)then 1 else 0 end) as semi_auto,
							sum(case when sm.final_status=3 AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as exception,
                            sum(case when sm.final_status=25 AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as nedss_exception,
							sum(case when sm.final_status=19 AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as qa,
                            sum(case when sm.final_status=26 AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as unprocessed,
							sum(case when sm.final_status=27 AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as locked,
							sum(case when sm.final_status=28 AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as out_of_state,
							sum(case when (sm.deleted != 0 AND sm.deleted IS NOT NULL) then 1 else 0 end) as deleted,
							sum(case when (sm.final_status=0 or sm.final_status=12 or sm.final_status is null) AND (sm.deleted = 0 OR sm.deleted IS NULL) then 1 else 0 end) as orphan,
							count(sm.id) as total_submit
						FROM system_messages sm
						WHERE " . $labFilterClause . "(sm.reported_at >= :cleanFromDate) AND (sm.reported_at <= :cleanToDate) AND (sm.vocab_app_id = 2);";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $dashboardSummary['Total'] = $row->total_submit;
                    $dashboardSummary['Entry'] = $row->entry;
                    $dashboardSummary['Out of State'] = $row->out_of_state;
                    $dashboardSummary['Pending'] = $row->nedss_exception;
                    $dashboardSummary['Semi-Auto'] = $row->semi_auto;
                    $dashboardSummary['Assigned'] = $row->assigned;
                    $dashboardSummary['Graylist'] = $row->gray;
                    $dashboardSummary['Exception'] = $row->exception;
                    $dashboardSummary['QA Review'] = $row->qa;
                    $dashboardSummary['Deleted'] = $row->deleted;
                    $dashboardSummary['Unprocessed'] = $row->unprocessed;
                    $dashboardSummary['Locked'] = $row->locked;
                    $dashboardSummary['Unknown'] = $row->orphan;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $dashboardSummary;
        }

        return $dashboardSummary;
    }

    /**
     * Gets number of messages assigned automatically vs manually for 'Percent Automated Messages' report.
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardAutomationFactor($fromDate, $toDate)
    {
        $resultArray = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $sql = "SELECT
							SUM(CASE WHEN autosub.auto = 0 THEN 1 ELSE 0 END) AS count_auto,
							SUM(CASE WHEN autosub.auto > 0 THEN 1 ELSE 0 END) AS count_manual
						FROM (
							SELECT SUM(CASE WHEN user_id <> :elrUserID THEN 1 ELSE 0 END) AS auto
							FROM system_messages_audits sma1 WHERE sma1.system_message_id IN (
								SELECT sma.system_message_id
								FROM system_messages_audits sma
								INNER JOIN system_messages sm ON (sma.system_message_id = sm.id)
								WHERE " . $labFilterClause . "sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
                                AND sm.vocab_app_id = 2
								AND sma.message_action_id IN (22, 23, 24, 28, 29, 39)
								AND (sm.deleted IS NULL OR sm.deleted NOT IN (1, 2))
							)
							GROUP BY sma1.system_message_id
						) AS autosub;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            $stmt->bindValue(':elrUserID', EPITRAX_AUTH_ELR_UID, PDO::PARAM_STR);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $resultArray['Automatically Assigned'] = $row->count_auto;
                    $resultArray['Manually Assigned'] = $row->count_manual;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $resultArray;
        }

        return $resultArray;
    }

    /**
     * Gets the number of blacklisted messages by sending application [connector] for the 'Messages Blacklisted' report.
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardBlacklistSummary($fromDate, $toDate)
    {
        $summary = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        try {
            $sql = "SELECT o.connector, count(o.connector) AS counter
						FROM system_original_messages o
						WHERE NOT EXISTS (
							SELECT m.id
							FROM system_messages m
							WHERE m.original_message_id = o.id
						)
						AND o.created_at >= :cleanFromDate AND o.created_at <= :cleanToDate
						GROUP BY o.connector ORDER BY o.connector;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->connector] = $row->counter;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * Gets message QA summary data for the 'Messages with QA Errors' report
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardMessageQuality($fromDate, $toDate)
    {
        $summary = array();

        $flagArray = array(
            EMSA_FLAG_QA_MANDATORY,
            EMSA_FLAG_QA_CODING,
            EMSA_FLAG_QA_MQF,
            EMSA_FLAG_DE_ERROR,
            EMSA_FLAG_FIX_DUPLICATE,
            EMSA_FLAG_DE_OTHER,
            EMSA_FLAG_DE_NEEDFIX
        );

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $sql = "SELECT mf.label AS category, count(sm.message_flags) AS counter
						FROM system_message_flags mf
						LEFT JOIN (
							SELECT sm.*
							FROM system_messages sm
							WHERE " . $labFilterClause . "sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate AND sm.vocab_app_id = 2
						) sm ON (power(2, mf.id)::integer & sm.message_flags <> 0)
						WHERE power(2, mf.id) IN (" . implode(',', $flagArray) . ")
						GROUP BY 1
						ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->category] = $row->counter;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * For each CDC disease category, get a count of new NEDSS events created by EMSA (for the 'New CMRs Generated by ELR' report).
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardNewCase($fromDate, $toDate)
    {
        $summary = $this->getBlankDashboardDiseaseCategoryArray();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $cdcCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('disease_category');")->fetchColumn(0));
            $conditionCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('condition');")->fetchColumn(0));
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        try {
            $sql = "SELECT mv_outer.concept AS category, count(sm.id) AS counter
						FROM system_messages sm, vocab_master_vocab mv_outer
						WHERE " . $labFilterClause . "mv_outer.category = :cdcCategoryId
                        AND sm.vocab_app_id = 2
						AND sm.disease IN (
							SELECT mv.concept
							FROM vocab_master_vocab mv
							WHERE mv.category = :conditionCategoryId
							AND mv.id IN (
								SELECT condition
								FROM vocab_master_condition mc
								WHERE mc.disease_category = mv_outer.id
							)
						)
						AND sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
						AND sm.id IN (
							SELECT sma.system_message_id
							FROM system_messages_audits sma
							WHERE sma.message_action_id IN (23, 24)
						)
						GROUP BY 1
						ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            $stmt->bindValue(':cdcCategoryId', $cdcCategoryId, PDO::PARAM_INT);
            $stmt->bindValue(':conditionCategoryId', $conditionCategoryId, PDO::PARAM_INT);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->category] = $row->counter;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * For each CDC disease category, get a count of lab results added to existing NEDSS events by EMSA (for the 'Existing Labs Updated by ELR' report).
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardAppendedCase($fromDate, $toDate)
    {
        $summary = $this->getBlankDashboardDiseaseCategoryArray();

        foreach ($summary as $summaryKey => $summaryItem) {
            $summary[$summaryKey]['labs_updated'] = 0;
        }

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $cdcCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('disease_category');")->fetchColumn(0));
            $conditionCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('condition');")->fetchColumn(0));
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        try {
            $sql = "SELECT mv_outer.concept AS category, count(distinct sm.lab_result_id) AS total_labs
						FROM system_messages sm, vocab_master_vocab mv_outer
						WHERE " . $labFilterClause . "mv_outer.category = :cdcCategoryId
                        AND sm.vocab_app_id = 2
						AND sm.disease IN (
							SELECT mv.concept
							FROM vocab_master_vocab mv
							WHERE mv.category = :conditionCategoryId
							AND mv.id IN (
								SELECT condition
								FROM vocab_master_condition mc
								WHERE mc.disease_category = mv_outer.id
							)
						)
						AND sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
						AND sm.id IN (
							SELECT sma.system_message_id
							FROM system_messages_audits sma
							WHERE sma.message_action_id IN (22, 28, 29, 39)
						)
						GROUP BY 1
						ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            $stmt->bindValue(':cdcCategoryId', $cdcCategoryId, PDO::PARAM_INT);
            $stmt->bindValue(':conditionCategoryId', $conditionCategoryId, PDO::PARAM_INT);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->category] = array(
                        'labs_updated' => $row->total_labs
                    );
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * For each CDC disease category, get a count of duplicate messages discarded by EMSA (for the 'Duplicate Messages Discarded' report).
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardDiscardedCase($fromDate, $toDate)
    {
        $summary = $this->getBlankDashboardDiseaseCategoryArray();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $cdcCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('disease_category');")->fetchColumn(0));
            $conditionCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('condition');")->fetchColumn(0));
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        try {
            $sql = "SELECT mv_outer.concept AS category, count(sm.id) AS counter
						FROM system_messages sm, vocab_master_vocab mv_outer
						WHERE " . $labFilterClause . "mv_outer.category = :cdcCategoryId
                        AND sm.vocab_app_id = 2
						AND sm.disease IN (
							SELECT mv.concept
							FROM vocab_master_vocab mv
							WHERE mv.category = :conditionCategoryId
							AND mv.id IN (
								SELECT condition
								FROM vocab_master_condition mc
								WHERE mc.disease_category = mv_outer.id
							)
						)
						AND sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
						AND sm.id IN (
							SELECT sma.system_message_id
							FROM system_messages_audits sma
							WHERE sma.message_action_id IN (7)
						)
						GROUP BY 1
						ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            $stmt->bindValue(':cdcCategoryId', $cdcCategoryId, PDO::PARAM_INT);
            $stmt->bindValue(':conditionCategoryId', $conditionCategoryId, PDO::PARAM_INT);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->category] = $row->counter;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * For each CDC disease category, get a count of the number of messages graylisted by EMSA (for the 'Messages Graylisted' report).
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardGraylistSummary($fromDate, $toDate)
    {
        $summary = $this->getBlankDashboardDiseaseCategoryArray();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $cdcCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('disease_category');")->fetchColumn(0));
            $conditionCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('condition');")->fetchColumn(0));
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        try {
            $sql = "SELECT mv_outer.concept AS category, count(sm.id) AS counter
						FROM system_messages sm, vocab_master_vocab mv_outer
						WHERE " . $labFilterClause . "mv_outer.category = :cdcCategoryId
                        AND sm.vocab_app_id = 2
						AND sm.disease IN (
							SELECT mv.concept
							FROM vocab_master_vocab mv
							WHERE mv.category = :conditionCategoryId
							AND mv.id IN (
								SELECT condition
								FROM vocab_master_condition mc
								WHERE mc.disease_category = mv_outer.id
							)
						)
						AND sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
						AND sm.final_status = :grayStatus
						AND ((sm.deleted IS NULL) OR (sm.deleted NOT IN (1, 2)))
						GROUP BY 1
						ORDER BY 1;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            $stmt->bindValue(':cdcCategoryId', $cdcCategoryId, PDO::PARAM_INT);
            $stmt->bindValue(':conditionCategoryId', $conditionCategoryId, PDO::PARAM_INT);
            $stmt->bindValue(':grayStatus', GRAY_STATUS, PDO::PARAM_INT);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $summary[$row->category] = $row->counter;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        return $summary;
    }

    /**
     * Get a count of messages received per sending facility per day for all visible sending facilites in the reporting period.
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardLab($fromDate, $toDate)
    {
        $dashboardLab = array();
        $activeSenders = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        $labFilterClauseActiveSenders = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
            $labFilterClauseActiveSenders = '(l.id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            // get list of visible configured senders
            $activeSendersSql = "SELECT l.id AS lab_id, l.ui_name AS lab_name
					FROM structure_labs l
					WHERE " . $labFilterClauseActiveSenders . "l.visible IS TRUE
                    AND alias_for = 0
					ORDER BY l.ui_name;";
            $activeSendersStmt = $this->dbConn->prepare($activeSendersSql);
            if ($activeSendersStmt->execute()) {
                while ($activeSendersRow = $activeSendersStmt->fetchObject()) {
                    $activeSenders[$activeSendersRow->lab_id] = $activeSendersRow->lab_name;
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $dashboardLab;
        }

        // stick the Google DataTable column headers into the first element of the array
        $dashboardLab['headers'] = array("Day");
        array_push($dashboardLab['headers'], 'Total');
        //array_push($dashboardLab['headers'], 'Certainty');
        foreach ($activeSenders as $activeSenderName) {
            array_push($dashboardLab['headers'], $activeSenderName);
        }

        // populate $dashboard_lab with every date between date range and 0 values, update later in query
        $reportInterval = DateInterval::createFromDateString('+1 day');
        $reportPeriod = new DatePeriod($fromDateTime, $reportInterval, $toDateTime);

        foreach ($reportPeriod as $reportDate) {
            $thisReportDateStr = $reportDate->format('Y-m-d');
            //$dashboardLab[$thisReportDateStr] = array('Total' => 0, 'Certainty' => 'false');
            $dashboardLab[$thisReportDateStr] = array('Total' => 0);
            foreach ($activeSenders as $activeSenderPeriodName) {
                $dashboardLab[$thisReportDateStr][$activeSenderPeriodName] = 0;
            }
        }

        try {
            // get results back per-lab and per-day within the date range
            $sql = "SELECT
							extract(year from sm.reported_at) as created_year,
							lpad(extract(month from sm.reported_at)::varchar, 2, '0') as created_month,
							lpad(extract(day from sm.reported_at)::varchar, 2, '0') as created_day";
            foreach ($activeSenders as $activeSenderId => $activeSenderQueryName) {
                $sql .= ", \nsum(CASE WHEN sm.lab_id = " . $activeSenderId . " THEN 1 ELSE 0 END) AS \"" . $activeSenderQueryName . "_count\"";
            }
            $sql .= "\nFROM system_messages sm
						WHERE " . $labFilterClause . "sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate AND sm.vocab_app_id = 2
						GROUP BY 1, 2, 3
						ORDER BY 1, 2, 3;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    foreach ($activeSenders as $activeSenderName2) {
                        $dashboardLab[$row->created_year . '-' . $row->created_month . '-' . $row->created_day][$activeSenderName2] = intval($row->{$activeSenderName2 . '_count'});
                    }
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $dashboardLab;
        }

        foreach ($dashboardLab as $dbLabTotalKey => $dbTotalArr) {
            if ($dbLabTotalKey != 'headers') {
                $dashboardLab[$dbLabTotalKey]['Total'] = array_sum($dbTotalArr);
                //$dashboardLab[$dbLabTotalKey]['Certainty'] = 'false';
            }
        }

        return $dashboardLab;
    }

    /**
     * By condition, gets a count of labs received and labs assigned (for the 'Disease Summary' report).
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getDashboardConditionSummary($fromDate, $toDate)
    {
        $conditionSummary = array();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        $innerLabFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
            $innerLabFilterClause = '(sm3.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $sql = "SELECT
							DISTINCT sm.disease AS condition,
							count(*) AS total_received,
							(SELECT count(DISTINCT sm3.lab_result_id)
								FROM system_messages sm3
								WHERE " . $innerLabFilterClause . "sm3.reported_at >= :cleanFromDate AND sm3.reported_at <= :cleanToDate
								AND sm3.disease = sm.disease
                                AND sm3.vocab_app_id = 2
								AND sm3.id IN (
									SELECT sma.system_message_id
									FROM system_messages_audits sma
									WHERE sma.message_action_id IN (22, 28, 29, 23, 24, 39)
								)
							) AS total_labs
						FROM system_messages sm
						WHERE " . $labFilterClause . "sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
                        AND sm.vocab_app_id = 2
						GROUP BY 1
						ORDER BY 2 DESC;";
            $stmt = $this->dbConn->prepare($sql);
            $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
            $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
            if ($stmt->execute()) {
                while ($row = $stmt->fetchObject()) {
                    $conditionSummary[((strlen($row->condition) > 0) ? addslashes($row->condition) : "Missing/Unknown")] = array(
                        'total_received' => $row->total_received,
                        'total_labs' => $row->total_labs
                    );
                }
            }
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $conditionSummary;
        }

        return $conditionSummary;
    }

    /**
     * For each CDC disease category, get the average amount of time between Date of Specimen Collection
     * and Date Assigned for lab results assigned by EMSA (for the 'Avg. Time from Specimen Collection to LHD Routing' report).
     *
     * @param string $fromDate Start date for reporting period.  If blank, current system time is used.
     * @param string $toDate End date for reporting period.  If blank, current system time is used.
     *
     * @return array
     */
    public function getAvgCMRCreateTime($fromDate, $toDate)
    {
        $summary = $this->getBlankDashboardDiseaseCategoryArray();
        $summaryTemp = $this->getBlankDashboardDiseaseCategoryArray();

        try {
            $fromDateTime = DateTimeUtils::createMixed($fromDate);
        } catch (Throwable $e) {
            $fromDateTime = DateTimeUtils::createMixed();
        }

        try {
            $toDateTime = DateTimeUtils::createMixed($toDate);
        } catch (Throwable $e) {
            $toDateTime = DateTimeUtils::createMixed();
        }

        $toDateTime->modify('+1 day'); // include last day specified

        $cleanFromDate = $fromDateTime->format('m/d/Y');
        $cleanToDate = $toDateTime->format('m/d/Y');

        $labFilterClause = '';
        if (!EmsaUtils::emptyTrim($_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) {
            $labFilterClause = '(sm.lab_id IN (' . implode(",", array_map("intval", $_SESSION[EXPORT_SERVERNAME]['dashboard_lab_filter'])) . ')) AND ';
        }

        try {
            $cdcCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('disease_category');")->fetchColumn(0));
            $conditionCategoryId = intval($this->dbConn->query("SELECT vocab_category_id('condition');")->fetchColumn(0));
        } catch (Throwable $e) {
            ExceptionUtils::logException($e);
            return $summary;
        }

        $sql = "SELECT mv_outer.concept AS category, sm.master_xml AS master_xml, sm.assigned_date AS assigned_date
					FROM system_messages sm, vocab_master_vocab mv_outer
					WHERE " . $labFilterClause . "mv_outer.category = :cdcCategoryId
					AND sm.disease IN (
						SELECT mv.concept
						FROM vocab_master_vocab mv
						WHERE mv.category = :conditionCategoryId
						AND mv.id IN (
							SELECT condition
							FROM vocab_master_condition mc
							WHERE mc.disease_category = mv_outer.id
						)
					)
					AND sm.reported_at >= :cleanFromDate AND sm.reported_at <= :cleanToDate
					AND sm.id IN (
						SELECT sma.system_message_id
						FROM system_messages_audits sma
						WHERE sma.message_action_id IN (23, 24)
					)
					GROUP BY 1, 2, 3
					ORDER BY 1;";
        $stmt = $this->dbConn->prepare($sql);
        $stmt->bindValue(':cleanFromDate', $cleanFromDate, PDO::PARAM_STR);
        $stmt->bindValue(':cleanToDate', $cleanToDate, PDO::PARAM_STR);
        $stmt->bindValue(':cdcCategoryId', $cdcCategoryId, PDO::PARAM_INT);
        $stmt->bindValue(':conditionCategoryId', $conditionCategoryId, PDO::PARAM_INT);
        if ($stmt->execute()) {
            while ($row = $stmt->fetchObject()) {
                $masterXml = null;
                $specimenCollectionTime = null;
                $assignmentTime = null;

                $masterXml = simplexml_load_string($row->master_xml);
                if ($masterXml !== false) {
                    $specimenCollectionTime = strtotime(trim($masterXml->labs->collection_date));
                    $assignmentTime = strtotime(trim($row->assigned_date));

                    if (($specimenCollectionTime !== false) && ($assignmentTime !== false)) {
                        $secondsToAssignment = abs(intval($assignmentTime) - intval($specimenCollectionTime));
                        $summaryTemp[$row->category][] = $secondsToAssignment;
                    }
                }
            }
        }

        foreach ($summaryTemp as $cdcCategory => $timeDiffs) {
            $categoryTimeAvg = null;
            if (is_array($timeDiffs) && count($timeDiffs) > 0) {
                $categoryTimeAvg = round((array_sum($timeDiffs) / count($timeDiffs)));
            }
            $summary[$cdcCategory] = DateTimeUtils::elapsedTimeToString($categoryTimeAvg, 1);
        }

        return $summary;
    }

    public function getSystemAlerts()
    {
        $summary = array();

        $sql = "(SELECT sa.id AS alert_id, sat.name || ': ' || CASE WHEN sa.info IS NULL THEN '[Blank]' WHEN sa.info = '' THEN '[Blank]' ELSE sa.info END AS name
                FROM system_alerts sa
                INNER JOIN system_alert_types sat ON (sa.alert_type_id = sat.id)
                WHERE resolved IS FALSE)
                UNION (
                SELECT id AS alert_id, exception_message AS name
                FROM preprocessor_exceptions
                );";
        $stmt = $this->dbConn->query($sql);

        while ($row = $stmt->fetchObject()) {
            if (isset($summary[trim($row->name)])) {
                $summary[trim($row->name)] += 1;
            } else {
                $summary[trim($row->name)] = 1;
            }
        }

        return $summary;
    }

    /**
     * Gets a list of CDC disease categories as-defined in Master Vocabulary and returns them as an array.
     *
     * @return array
     */
    protected function getBlankDashboardDiseaseCategoryArray()
    {
        $template = array();

        $sql = "SELECT concept
					FROM vocab_master_vocab
					WHERE category = vocab_category_id('disease_category')
					ORDER BY concept;";
        $stmt = $this->dbConn->query($sql);

        if ($stmt !== false) {
            while ($row = $stmt->fetchObject()) {
                $template[trim($row->concept)] = array();
            }
        }

        return $template;
    }

}
